// ==============================
// Fichier:			UDESTables.cp
// Projet:			K
// 
// CrŽŽ le:			6/9/2003
// Tabulation:		4 espaces
// 
// ***** BEGIN LICENSE BLOCK *****
// Version: MPL 1.1
//
// The contents of this file are subject to the Mozilla Public License Version
// 1.1 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
//
// Software distributed under the License is distributed on an "AS IS" basis,
// WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
// for the specific language governing rights and limitations under the
// License.
//
// The Original Code is UDESTables.cp.
//
// The Initial Developer of the Original Code is Paul Guyot.
// Portions created by the Initial Developer are Copyright (C) 2001-2004
// the Initial Developer. All Rights Reserved.
//
// Contributor(s):
//   Paul Guyot <pguyot@kallisys.net> (original author)
//
// ***** END LICENSE BLOCK *****
// ===========
// $Id: UDESTables.cp,v 1.3 2004/11/23 15:11:22 paul Exp $
// ===========

#include <K/Defines/KDefinitions.h>
#include <K/Crypto/UDES.h>

// K Libs
#include <K/Math/UTInt64.h>

// Tables pour UDES.

// ----------------------------------------------------	//
// Les tables.
// ----------------------------------------------------	//

//              -------------- PC-1 ---------------
//
//              57   49    41   33    25    17    9 
//               1   58    50   42    34    26   18 
//              10    2    59   51    43    35   27 
//              19   11     3   60    52    44   36 
//
//              63   55    47   39    31    23   15 
//               7   62    54   46    38    30   22 
//              14    6    61   53    45    37   29 
//              21   13     5   28    20    12    4
//

// It means that bit one of permuted key is bit 57 of original key.
// Bit one is the first most significant bit (the leftmost one).
// So we have:
//  bit 1 is bit 1 << (64-57)
//  0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 1000 0000

const KUInt8 UDES::kPC1Which[56] =
// *	1 or 0 (1 means high 32 bits)
{
	0, 0, 0, 0, 1, 1, 1, 1,
	0, 0, 0, 0, 1, 1, 1, 1,
	0, 0, 0, 0, 1, 1, 1, 1,
	0, 0, 0, 0,

	0, 0, 0, 0, 1, 1, 1, 1,
	0, 0, 0, 0, 1, 1, 1, 1,
	0, 0, 0, 0, 1, 1, 1, 1,
	1, 1, 1, 1
};

// Mask for a 32 bits word.
const KUInt32 UDES::kPC1Mask[56] =
{
	(KUInt32) 1 << (64-57),	(KUInt32) 1 << (64-49),	(KUInt32) 1 << (64-41),	(KUInt32) 1 << (64-33),
	(KUInt32) 1 << (32-25),	(KUInt32) 1 << (32-17),	(KUInt32) 1 << (32- 9),	(KUInt32) 1 << (32- 1),
	(KUInt32) 1 << (64-58),	(KUInt32) 1 << (64-50),	(KUInt32) 1 << (64-42),	(KUInt32) 1 << (64-34),
	(KUInt32) 1 << (32-26),	(KUInt32) 1 << (32-18),	(KUInt32) 1 << (32-10),	(KUInt32) 1 << (32-02),
	(KUInt32) 1 << (64-59),	(KUInt32) 1 << (64-51),	(KUInt32) 1 << (64-43),	(KUInt32) 1 << (64-35),
	(KUInt32) 1 << (32-27),	(KUInt32) 1 << (32-19),	(KUInt32) 1 << (32-11),	(KUInt32) 1 << (32- 3),
	(KUInt32) 1 << (64-60),	(KUInt32) 1 << (64-52),	(KUInt32) 1 << (64-44),	(KUInt32) 1 << (64-36),

	(KUInt32) 1 << (64-63),	(KUInt32) 1 << (64-55),	(KUInt32) 1 << (64-47),	(KUInt32) 1 << (64-39),
	(KUInt32) 1 << (32-31),	(KUInt32) 1 << (32-23),	(KUInt32) 1 << (32-15),	(KUInt32) 1 << (32-07),
	(KUInt32) 1 << (64-62),	(KUInt32) 1 << (64-54),	(KUInt32) 1 << (64-46),	(KUInt32) 1 << (64-38),
	(KUInt32) 1 << (32-30),	(KUInt32) 1 << (32-22),	(KUInt32) 1 << (32-14),	(KUInt32) 1 << (32- 6),
	(KUInt32) 1 << (64-61),	(KUInt32) 1 << (64-53),	(KUInt32) 1 << (64-45),	(KUInt32) 1 << (64-37),
	(KUInt32) 1 << (32-29),	(KUInt32) 1 << (32-21),	(KUInt32) 1 << (32-13),	(KUInt32) 1 << (32-05),
	(KUInt32) 1 << (32-28),	(KUInt32) 1 << (32-20),	(KUInt32) 1 << (32-12),	(KUInt32) 1 << (32- 4)
};

//                 ------------ PC-2 ------------
//
//                 14   17    11   24     1     5 
//                  3   28    15    6    21    10 
//                 23   19    12    4    26     8 
//                 16    7    27   20    13     2 
//                 41   52    31   37    47    55 
//                 30   40    51   45    33    48 
//                 44   49    39   56    34    53 
//                 46   42    50   36    29    32
//
// It means that bit one of permuted key is bit 14 of original key.
// Bit one is the first most significant bit (the leftmost one).
// So we have:
//  bit 1 is bit 1 << (56-14)
//  0b0000 0000 0000 0100 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000

//	Mask for a 28 bits word.
const KUInt32 UDES::kPC2Mask[48] =
{
	1 << (28-14),	1 << (28-17),	1 << (28-11),
	1 << (28-24),	1 << (28- 1),	1 << (28- 5),
	1 << (28- 3),	1 << (28-28),	1 << (28-15),
	1 << (28- 6),	1 << (28-21),	1 << (28-10),
	1 << (28-23),	1 << (28-19),	1 << (28-12),
	1 << (28- 4),	1 << (28-26),	1 << (28- 8),
	1 << (28-16),	1 << (28- 7),	1 << (28-27),
	1 << (28-20),	1 << (28-13),	1 << (28- 2),

	1 << (56-41),	1 << (56-52),	1 << (56-31),
	1 << (56-37),	1 << (56-47),	1 << (56-55),
	1 << (56-30),	1 << (56-40),	1 << (56-51),
	1 << (56-45),	1 << (56-33),	1 << (56-48),
	1 << (56-44),	1 << (56-49),	1 << (56-39),
	1 << (56-56),	1 << (56-34),	1 << (56-53),
	1 << (56-46),	1 << (56-42),	1 << (56-50),
	1 << (56-36),	1 << (56-29),	1 << (56-32)
};
 
//          ------------------- IP ------------------
//
//          58    50   42    34    26   18    10    2
//          60    52   44    36    28   20    12    4
//          62    54   46    38    30   22    14    6
//          64    56   48    40    32   24    16    8
//          57    49   41    33    25   17     9    1
//          59    51   43    35    27   19    11    3
//          61    53   45    37    29   21    13    5
//          63    55   47    39    31   23    15    7
//
// It meanst that bit one of the permuted data is bit 58 of the original data.
// So we have:
//  bit 1 is bit 1 << (64 - 58)

// Mask for a 32 bits word.
const KUInt32 UDES::kIPMask[64] =
{
	(KUInt32) 1 << (64-58),	(KUInt32) 1 << (64-50),	(KUInt32) 1 << (64-42),	(KUInt32) 1 << (64-34),
	(KUInt32) 1 << (32-26),	(KUInt32) 1 << (32-18),	(KUInt32) 1 << (32-10),	(KUInt32) 1 << (32- 2),
	(KUInt32) 1 << (64-60),	(KUInt32) 1 << (64-52),	(KUInt32) 1 << (64-44),	(KUInt32) 1 << (64-36),
	(KUInt32) 1 << (32-28),	(KUInt32) 1 << (32-20),	(KUInt32) 1 << (32-12),	(KUInt32) 1 << (32- 4),
	(KUInt32) 1 << (64-62),	(KUInt32) 1 << (64-54),	(KUInt32) 1 << (64-46),	(KUInt32) 1 << (64-38),
	(KUInt32) 1 << (32-30),	(KUInt32) 1 << (32-22),	(KUInt32) 1 << (32-14),	(KUInt32) 1 << (32- 6),
	(KUInt32) 1 << (64-64),	(KUInt32) 1 << (64-56),	(KUInt32) 1 << (64-48),	(KUInt32) 1 << (64-40),
	(KUInt32) 1 << (32-32),	(KUInt32) 1 << (32-24),	(KUInt32) 1 << (32-16),	(KUInt32) 1 << (32- 8),
	(KUInt32) 1 << (64-57),	(KUInt32) 1 << (64-49),	(KUInt32) 1 << (64-41),	(KUInt32) 1 << (64-33),
	(KUInt32) 1 << (32-25),	(KUInt32) 1 << (32-17),	(KUInt32) 1 << (32- 9),	(KUInt32) 1 << (32- 1),
	(KUInt32) 1 << (64-59),	(KUInt32) 1 << (64-51),	(KUInt32) 1 << (64-43),	(KUInt32) 1 << (64-35),
	(KUInt32) 1 << (32-27),	(KUInt32) 1 << (32-19),	(KUInt32) 1 << (32-11),	(KUInt32) 1 << (32- 3),
	(KUInt32) 1 << (64-61),	(KUInt32) 1 << (64-53),	(KUInt32) 1 << (64-45),	(KUInt32) 1 << (64-37),
	(KUInt32) 1 << (32-29),	(KUInt32) 1 << (32-21),	(KUInt32) 1 << (32-13),	(KUInt32) 1 << (32- 5),
	(KUInt32) 1 << (64-63),	(KUInt32) 1 << (64-55),	(KUInt32) 1 << (64-47),	(KUInt32) 1 << (64-39),
	(KUInt32) 1 << (32-31),	(KUInt32) 1 << (32-23),	(KUInt32) 1 << (32-15),	(KUInt32) 1 << (32- 7)
};

//          ------------------ IP-1 -----------------
//
//          40     8   48    16    56   24    64   32
//          39     7   47    15    55   23    63   31
//          38     6   46    14    54   22    62   30
//          37     5   45    13    53   21    61   29
//          36     4   44    12    52   20    60   28
//          35     3   43    11    51   19    59   27
//          34     2   42    10    50   18    58   26
//          33     1   41     9    49   17    57   25
//
// It means that bit one of the permuted data is bit 58 of the original data.
// So we have:
//  bit 1 is bit 1 << (64 - 40)
const KUInt32 UDES::kIPInvMask[64] =
{
	(KUInt32) 1 << (64-40),	(KUInt32) 1 << (32- 8),	(KUInt32) 1 << (64-48),	(KUInt32) 1 << (32-16),
	(KUInt32) 1 << (64-56),	(KUInt32) 1 << (32-24),	(KUInt32) 1 << (64-64),	(KUInt32) 1 << (32-32),
	(KUInt32) 1 << (64-39),	(KUInt32) 1 << (32- 7),	(KUInt32) 1 << (64-47),	(KUInt32) 1 << (32-15),
	(KUInt32) 1 << (64-55),	(KUInt32) 1 << (32-23),	(KUInt32) 1 << (64-63),	(KUInt32) 1 << (32-31),
	(KUInt32) 1 << (64-38),	(KUInt32) 1 << (32- 6),	(KUInt32) 1 << (64-46),	(KUInt32) 1 << (32-14),
	(KUInt32) 1 << (64-54),	(KUInt32) 1 << (32-22),	(KUInt32) 1 << (64-62),	(KUInt32) 1 << (32-30),
	(KUInt32) 1 << (64-37),	(KUInt32) 1 << (32- 5),	(KUInt32) 1 << (64-45),	(KUInt32) 1 << (32-13),
	(KUInt32) 1 << (64-53),	(KUInt32) 1 << (32-21),	(KUInt32) 1 << (64-61),	(KUInt32) 1 << (32-29),
	(KUInt32) 1 << (64-36),	(KUInt32) 1 << (32- 4),	(KUInt32) 1 << (64-44),	(KUInt32) 1 << (32-12),
	(KUInt32) 1 << (64-52),	(KUInt32) 1 << (32-20),	(KUInt32) 1 << (64-60),	(KUInt32) 1 << (32-28),
	(KUInt32) 1 << (64-35),	(KUInt32) 1 << (32- 3),	(KUInt32) 1 << (64-43),	(KUInt32) 1 << (32-11),
	(KUInt32) 1 << (64-51),	(KUInt32) 1 << (32-19),	(KUInt32) 1 << (64-59),	(KUInt32) 1 << (32-27),
	(KUInt32) 1 << (64-34),	(KUInt32) 1 << (32- 2),	(KUInt32) 1 << (64-42),	(KUInt32) 1 << (32-10),
	(KUInt32) 1 << (64-50),	(KUInt32) 1 << (32-18),	(KUInt32) 1 << (64-58),	(KUInt32) 1 << (32-26),
	(KUInt32) 1 << (64-33),	(KUInt32) 1 << (32- 1),	(KUInt32) 1 << (64-41),	(KUInt32) 1 << (32- 9),
	(KUInt32) 1 << (64-49),	(KUInt32) 1 << (32-17),	(KUInt32) 1 << (64-57),	(KUInt32) 1 << (32-25)
};

//               ------------ ESel ------------
//
//               32    1     2    3     4     5 
//                4    5     6    7     8     9 
//                8    9    10   11    12    13 
//               12   13    14   15    16    17 
//               16   17    18   19    20    21 
//               20   21    22   23    24    25 
//               24   25    26   27    28    29 
//               28   29    30   31    32     1 
//
// It means that bit one of the permuted data is bit 32 of the original data.
// So we have:
//  bit 1 is bit 1 << (32 - 32)
const KUInt32 UDES::kESelMask[48] =
{
	(KUInt32) 1 << (32-32),	(KUInt32) 1 << (32- 1),	(KUInt32) 1 << (32- 2),	(KUInt32) 1 << (32- 3),
	(KUInt32) 1 << (32- 4),	(KUInt32) 1 << (32- 5),	(KUInt32) 1 << (32- 4),	(KUInt32) 1 << (32- 5),
	(KUInt32) 1 << (32- 6),	(KUInt32) 1 << (32- 7),	(KUInt32) 1 << (32- 8),	(KUInt32) 1 << (32- 9),
	(KUInt32) 1 << (32- 8),	(KUInt32) 1 << (32- 9),	(KUInt32) 1 << (32-10),	(KUInt32) 1 << (32-11),
	(KUInt32) 1 << (32-12),	(KUInt32) 1 << (32-13),	(KUInt32) 1 << (32-12),	(KUInt32) 1 << (32-13),
	(KUInt32) 1 << (32-14),	(KUInt32) 1 << (32-15),	(KUInt32) 1 << (32-16),	(KUInt32) 1 << (32-17),
	(KUInt32) 1 << (32-16),	(KUInt32) 1 << (32-17),	(KUInt32) 1 << (32-18),	(KUInt32) 1 << (32-19),
	(KUInt32) 1 << (32-20),	(KUInt32) 1 << (32-21),	(KUInt32) 1 << (32-20),	(KUInt32) 1 << (32-21),
	(KUInt32) 1 << (32-22),	(KUInt32) 1 << (32-23),	(KUInt32) 1 << (32-24),	(KUInt32) 1 << (32-25),
	(KUInt32) 1 << (32-24),	(KUInt32) 1 << (32-25),	(KUInt32) 1 << (32-26),	(KUInt32) 1 << (32-27),
	(KUInt32) 1 << (32-28),	(KUInt32) 1 << (32-29),	(KUInt32) 1 << (32-28),	(KUInt32) 1 << (32-29),
	(KUInt32) 1 << (32-30),	(KUInt32) 1 << (32-31),	(KUInt32) 1 << (32-32),	(KUInt32) 1 << (32- 1)
};

//    ====================== Suggested SBoxes ======================
//    ----------------------------- S1 -----------------------------
//    14   4  13   1   2  15  11   8   3  10   6  12   5   9   0   7
//     0  15   7   4  14   2  13   1  10   6  12  11   9   5   3   8
//     4   1  14   8  13   6   2  11  15  12   9   7   3  10   5   0
//    15  12   8   2   4   9   1   7   5  11   3  14  10   0   6  13
//
//    ----------------------------- S2 -----------------------------
//    15   1   8  14   6  11   3   4   9   7   2  13  12   0   5  10
//     3  13   4   7  15   2   8  14  12   0   1  10   6   9  11   5
//     0  14   7  11  10   4  13   1   5   8  12   6   9   3   2  15
//    13   8  10   1   3  15   4   2  11   6   7  12   0   5  14   9
//
//    ----------------------------- S3 -----------------------------
//    10   0   9  14   6   3  15   5   1  13  12   7  11   4   2   8
//    13   7   0   9   3   4   6  10   2   8   5  14  12  11  15   1
//    13   6   4   9   8  15   3   0  11   1   2  12   5  10  14   7
//     1  10  13   0   6   9   8   7   4  15  14   3  11   5   2  12
//
//    ----------------------------- S4 -----------------------------
//     7  13  14   3   0   6   9  10   1   2   8   5  11  12   4  15
//    13   8  11   5   6  15   0   3   4   7   2  12   1  10  14   9
//    10   6   9   0  12  11   7  13  15   1   3  14   5   2   8   4
//     3  15   0   6  10   1  13   8   9   4   5  11  12   7   2  14
//
//    ----------------------------- S5 -----------------------------
//     2  12   4   1   7  10  11   6   8   5   3  15  13   0  14   9
//    14  11   2  12   4   7  13   1   5   0  15  10   3   9   8   6
//     4   2   1  11  10  13   7   8  15   9  12   5   6   3   0  14
//    11   8  12   7   1  14   2  13   6  15   0   9  10   4   5   3
//
//    ----------------------------- S6 -----------------------------
//    12   1  10  15   9   2   6   8   0  13   3   4  14   7   5  11
//    10  15   4   2   7  12   9   5   6   1  13  14   0  11   3   8
//     9  14  15   5   2   8  12   3   7   0   4  10   1  13  11   6
//     4   3   2  12   9   5  15  10  11  14   1   7   6   0   8  13
//
//    ----------------------------- S7 -----------------------------
//     4  11   2  14  15   0   8  13   3  12   9   7   5  10   6   1
//    13   0  11   7   4   9   1  10  14   3   5  12   2  15   8   6
//     1   4  11  13  12   3   7  14  10  15   6   8   0   5   9   2
//     6  11  13   8   1   4  10   7   9   5   0  15  14   2   3  12
//
//    ----------------------------- S8 -----------------------------
//    13   2   8   4   6  15  11   1  10   9   3  14   5   0  12   7
//     1  15  13   8  10   3   7   4  12   5   6  11   0  14   9   2
//     7  11   4   1   9  12  14   2   0   6  10  13  15   3   5   8
//     2   1  14   7   4  10   8  13  15  12   9   0   3   5   6  11

const KUInt8 UDES::kSBoxes[8][4][16] =
{
	{
		{ 14,  4, 13,  1,  2, 15, 11,  8,  3, 10,  6, 12,  5,  9,  0,  7 },
		{  0, 15,  7,  4, 14,  2, 13,  1, 10,  6, 12, 11,  9,  5,  3,  8 },
		{  4,  1, 14,  8, 13,  6,  2, 11, 15, 12,  9,  7,  3, 10,  5,  0 },
		{ 15, 12,  8,  2,  4,  9,  1,  7,  5, 11,  3, 14, 10,  0,  6, 13 }
	}, {
		{ 15,  1,  8, 14,  6, 11,  3,  4,  9,  7,  2, 13, 12,  0,  5, 10 },
		{  3, 13,  4,  7, 15,  2,  8, 14, 12,  0,  1, 10,  6,  9, 11,  5 },
		{  0, 14,  7, 11, 10,  4, 13,  1,  5,  8, 12,  6,  9,  3,  2, 15 },
		{ 13,  8, 10,  1,  3, 15,  4,  2, 11,  6,  7, 12,  0,  5, 14,  9 }
	}, {
		{ 10,  0,  9, 14,  6,  3, 15,  5,  1, 13, 12,  7, 11,  4,  2,  8 },
		{ 13,  7,  0,  9,  3,  4,  6, 10,  2,  8,  5, 14, 12, 11, 15,  1 },
		{ 13,  6,  4,  9,  8, 15,  3,  0, 11,  1,  2, 12,  5, 10, 14,  7 },
		{  1, 10, 13,  0,  6,  9,  8,  7,  4, 15, 14,  3, 11,  5,  2, 12 }
	}, {
		{  7, 13, 14,  3,  0,  6,  9, 10,  1,  2,  8,  5, 11, 12,  4, 15 },
		{ 13,  8, 11,  5,  6, 15,  0,  3,  4,  7,  2, 12,  1, 10, 14,  9 },
		{ 10,  6,  9,  0, 12, 11,  7, 13, 15,  1,  3, 14,  5,  2,  8,  4 },
		{  3, 15,  0,  6, 10,  1, 13,  8,  9,  4,  5, 11, 12,  7,  2, 14 }
	}, {
		{  2, 12,  4,  1,  7, 10, 11,  6,  8,  5,  3, 15, 13,  0, 14,  9 },
		{ 14, 11,  2, 12,  4,  7, 13,  1,  5,  0, 15, 10,  3,  9,  8,  6 },
		{  4,  2,  1, 11, 10, 13,  7,  8, 15,  9, 12,  5,  6,  3,  0, 14 },
		{ 11,  8, 12,  7,  1, 14,  2, 13,  6, 15,  0,  9, 10,  4,  5,  3 }
	}, {
		{ 12,  1, 10, 15,  9,  2,  6,  8,  0, 13,  3,  4, 14,  7,  5, 11 },
		{ 10, 15,  4,  2,  7, 12,  9,  5,  6,  1, 13, 14,  0, 11,  3,  8 },
		{  9, 14, 15,  5,  2,  8, 12,  3,  7,  0,  4, 10,  1, 13, 11,  6 },
		{  4,  3,  2, 12,  9,  5, 15, 10, 11, 14,  1,  7,  6,  0,  8, 13 }
	}, {
		{  4, 11,  2, 14, 15,  0,  8, 13,  3, 12,  9,  7,  5, 10,  6,  1 },
		{ 13,  0, 11,  7,  4,  9,  1, 10, 14,  3,  5, 12,  2, 15,  8,  6 },
		{  1,  4, 11, 13, 12,  3,  7, 14, 10, 15,  6,  8,  0,  5,  9,  2 },
		{  6, 11, 13,  8,  1,  4, 10,  7,  9,  5,  0, 15, 14,  2,  3, 12 }
	}, {
		{ 13,  2,  8,  4,  6, 15, 11,  1, 10,  9,  3, 14,  5,  0, 12,  7 },
		{  1, 15, 13,  8, 10,  3,  7,  4, 12,  5,  6, 11,  0, 14,  9,  2 },
		{  7, 11,  4,  1,  9, 12, 14,  2,  0,  6, 10, 13, 15,  3,  5,  8 },
		{  2,  1, 14,  7,  4, 10,  8, 13, 15, 12,  9,  0,  3,  5,  6, 11 }
	}
};

//                       ----- P  -----
//
//                       16   7  20  21 
//                       29  12  28  17 
//                        1  15  23  26 
//                        5  18  31  10 
//                        2   8  24  14 
//                       32  27   3   9 
//                       19  13  30   6 
//                       22  11   4  25 

// It means that bit one of the permuted word is bit 16 of the original word.
// So we have:
//  bit 1 is bit 1 << (32 - 16)
const KUInt32 UDES::kPermMask[32] =
{
	(KUInt32) 1 << (32-16),	(KUInt32) 1 << (32- 7),	(KUInt32) 1 << (32-20),	(KUInt32) 1 << (32-21),
	(KUInt32) 1 << (32-29),	(KUInt32) 1 << (32-12),	(KUInt32) 1 << (32-28),	(KUInt32) 1 << (32-17),
	(KUInt32) 1 << (32- 1),	(KUInt32) 1 << (32-15),	(KUInt32) 1 << (32-23),	(KUInt32) 1 << (32-26),
	(KUInt32) 1 << (32- 5),	(KUInt32) 1 << (32-18),	(KUInt32) 1 << (32-31),	(KUInt32) 1 << (32-10),
	(KUInt32) 1 << (32- 2),	(KUInt32) 1 << (32- 8),	(KUInt32) 1 << (32-24),	(KUInt32) 1 << (32-14),
	(KUInt32) 1 << (32-32),	(KUInt32) 1 << (32-27),	(KUInt32) 1 << (32- 3),	(KUInt32) 1 << (32- 9),
	(KUInt32) 1 << (32-19),	(KUInt32) 1 << (32-13),	(KUInt32) 1 << (32-30),	(KUInt32) 1 << (32- 6),
	(KUInt32) 1 << (32-22),	(KUInt32) 1 << (32-11),	(KUInt32) 1 << (32- 4),	(KUInt32) 1 << (32-25)
};

// --------- CreateKey Key ---------
// Key used in the CreateKey algorithm.

// Random number with a correct parity.
const KUInt64 UDES::kDefaultCreationKey =
	UTInt64::CreateKUInt64(
				0x433EFD1C,
				0x549D76D5 );

// The parity of these keys isn't correct.
const KUInt64 UDES::kNewtonCreationKey =
	UTInt64::CreateKUInt64(
				0x57406860,
				0x626D7464 );

// --------- Odd Bit Number ---------
// Table to fix the parity of a byte.

const KUInt8 UDES::kOddBitNumber[256] = {
    0x01, 0x01, 0x02, 0x02, 0x04, 0x04, 0x07, 0x07, 0x08, 0x08, 0x0B, 0x0B, 0x0D, 0x0D, 0x0E, 0x0E,
    0x10, 0x10, 0x13, 0x13, 0x15, 0x15, 0x16, 0x16, 0x19, 0x19, 0x1A, 0x1A, 0x1C, 0x1C, 0x1F, 0x1F,
    0x20, 0x20, 0x23, 0x23, 0x25, 0x25, 0x26, 0x26, 0x29, 0x29, 0x2A, 0x2A, 0x2C, 0x2C, 0x2F, 0x2F,
    0x31, 0x31, 0x32, 0x32, 0x34, 0x34, 0x37, 0x37, 0x38, 0x38, 0x3B, 0x3B, 0x3D, 0x3D, 0x3E, 0x3E,
    0x40, 0x40, 0x43, 0x43, 0x45, 0x45, 0x46, 0x46, 0x49, 0x49, 0x4A, 0x4A, 0x4C, 0x4C, 0x4F, 0x4F,
    0x51, 0x51, 0x52, 0x52, 0x54, 0x54, 0x57, 0x57, 0x58, 0x58, 0x5B, 0x5B, 0x5D, 0x5D, 0x5E, 0x5E,
    0x61, 0x61, 0x62, 0x62, 0x64, 0x64, 0x67, 0x67, 0x68, 0x68, 0x6B, 0x6B, 0x6D, 0x6D, 0x6E, 0x6E,
    0x70, 0x70, 0x73, 0x73, 0x75, 0x75, 0x76, 0x76, 0x79, 0x79, 0x7A, 0x7A, 0x7C, 0x7C, 0x7F, 0x7F,
    0x80, 0x80, 0x83, 0x83, 0x85, 0x85, 0x86, 0x86, 0x89, 0x89, 0x8A, 0x8A, 0x8C, 0x8C, 0x8F, 0x8F,
    0x91, 0x91, 0x92, 0x92, 0x94, 0x94, 0x97, 0x97, 0x98, 0x98, 0x9B, 0x9B, 0x9D, 0x9D, 0x9E, 0x9E,
    0xA1, 0xA1, 0xA2, 0xA2, 0xA4, 0xA4, 0xA7, 0xA7, 0xA8, 0xA8, 0xAB, 0xAB, 0xAD, 0xAD, 0xAE, 0xAE,
    0xB0, 0xB0, 0xB3, 0xB3, 0xB5, 0xB5, 0xB6, 0xB6, 0xB9, 0xB9, 0xBA, 0xBA, 0xBC, 0xBC, 0xBF, 0xBF,
    0xC1, 0xC1, 0xC2, 0xC2, 0xC4, 0xC4, 0xC7, 0xC7, 0xC8, 0xC8, 0xCB, 0xCB, 0xCD, 0xCD, 0xCE, 0xCE,
    0xD0, 0xD0, 0xD3, 0xD3, 0xD5, 0xD5, 0xD6, 0xD6, 0xD9, 0xD9, 0xDA, 0xDA, 0xDC, 0xDC, 0xDF, 0xDF,
    0xE0, 0xE0, 0xE3, 0xE3, 0xE5, 0xE5, 0xE6, 0xE6, 0xE9, 0xE9, 0xEA, 0xEA, 0xEC, 0xEC, 0xEF, 0xEF,
    0xF1, 0xF1, 0xF2, 0xF2, 0xF4, 0xF4, 0xF7, 0xF7, 0xF8, 0xF8, 0xFB, 0xFB, 0xFD, 0xFD, 0xFE, 0xFE
};

// =================================================================== //
// The more data I punch in this card, the lighter it becomes, and the //
// lower the mailing cost.                                             //
//                 -- S. Kelly-Bootle, "The Devil's DP Dictionary"     //
// =================================================================== //
