# ==============================
# File:     TFLSettings
# Project:  Einstein
#
# Copyright 2003-2022 by Paul Guyot (pguyot@kallisys.net) and others.
# ==============================

cmake_minimum_required(VERSION 3.13)

project("Einstein" VERSION "2022.5.0")

# ---- Configuration for all targets on all platforms

set ( CMAKE_CXX_STANDARD 17 )
set ( CMAKE_CXX_STANDARD_REQUIRED ON )
set ( CMAKE_CXX_EXTENSIONS OFF )

# ---- Include some additional functionality

include(CheckSymbolExists)
include(CheckFunctionExists)
include(CheckIncludeFile)

# ---- Configuration per platform

if (${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")

	# TODO: enable this for release builds
	#set (CMAKE_OSX_ARCHITECTURES=arm64;x86_64)
	# TODO: set this for FLTK and NEWT64 as well
	#set (CMAKE_OSX_DEPLOYMENT_TARGET 10.9) # Can't go any lower.
	# TODO: Fix this for release builds
	set (CMAKE_XCODE_ATTRIBUTE_CODE_SIGNING_REQUIRED "NO")
	set (CMAKE_XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY "")

elseif (${CMAKE_SYSTEM_NAME} STREQUAL "Linux")

	# Linux: nothing to do here

elseif (${CMAKE_SYSTEM_NAME} STREQUAL "Windows")

	# allow to build with multithreading libraries
	cmake_policy(SET CMP0091 NEW)
	set (CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")

else ()

	# Warn the caller that this is not supported
	message ("Einstein is not configured to build on this platform: " ${CMAKE_SYSTEM_NAME} ".")

endif ()

#
# ==== External Dependencies ===================================================
#
# ---- Newt/64 library ---------------------------------------------------------
#

# TODO: update this to automatically download and build in .../Einstein/newt64
if (${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
	find_package(Newt64 CONFIG HINTS ${CMAKE_SOURCE_DIR}/newt64/build) # -> Newt64_FOUND, Newt64_DIR
endif()

find_library(newt64_lib NAMES newt64 HINTS ${CMAKE_SOURCE_DIR}/newt64/build)
find_file(newt64_incl NAMES NewtCore.h PATH_SUFFIXES newt64 HINTS ${CMAKE_SOURCE_DIR}/newt64/src/newt_core/incs)

if (newt64_lib MATCHES ".*NOTFOUND" OR newt64_incl MATCHES ".*NOTFOUND")
	message(WARNING "Newt64 not found!")
	set ( NEWT64_FOUND false )
else()
	set ( NEWT64_FOUND true )
	get_filename_component(newt64_lib_path ${newt64_lib} DIRECTORY)
	get_filename_component(newt64_incl_path ${newt64_incl} DIRECTORY)
	if (WIN32)
		set ( NEWT64_INCLUDE_PATH ${newt64_incl_path} ${newt64_incl_path}/win )
	else()
		set ( NEWT64_INCLUDE_PATH ${newt64_incl_path} ${newt64_incl_path}/darwin )
	endif()
	message(STATUS "Newt64 found in " ${newt64_lib_path} )
endif()

#
# ---- FLTK library ------------------------------------------------------------
#

# TODO: update this to automatically download and build in .../Einstein/newt64
set(FLTK_SKIP_OPENGL true)
if (WIN32)
  find_program(LOCAL_FLTK_FLUID_EXECUTABLE fluid HINTS ${CMAKE_SOURCE_DIR}/fltk/build/bin "C:/Program Files/FLTK/bin")
else()
  find_program(LOCAL_FLTK_FLUID_EXECUTABLE fluid HINTS ${CMAKE_SOURCE_DIR}/fltk/build/bin)
endif()
find_package(FLTK REQUIRED NO_MODULE HINTS ${CMAKE_SOURCE_DIR}/fltk/build)

function (build_with_fluid name dir)
	add_custom_command (
		WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}/${dir}"
		COMMAND ${LOCAL_FLTK_FLUID_EXECUTABLE} -c ${name}.fl
		DEPENDS "${CMAKE_SOURCE_DIR}/${dir}/${name}.fl"
		DEPENDS "${ARGN}"
		OUTPUT  "${CMAKE_SOURCE_DIR}/${dir}/${name}.cpp"
		OUTPUT  "${CMAKE_SOURCE_DIR}/${dir}/${name}.h"
	)
	set_source_files_properties(
		${CMAKE_SOURCE_DIR}/${dir}/${name}.cpp
		PROPERTIES GENERATED TRUE
	)
	set_source_files_properties(
		${CMAKE_SOURCE_DIR}/${dir}/${name}.h
		PROPERTIES GENERATED TRUE
	)
endfunction ()

#
# ==== Configuring Einstein Build ==============================================
#
# ---- Cross-platform checks ---------------------------------------------------
#

set(system_libs "")

check_symbol_exists(strlcpy string.h HAVE_DECL_STRLCPY)
check_symbol_exists(strlcat string.h HAVE_DECL_STRLCAT)
check_function_exists(strlcpy HAVE_STRLCPY)
check_function_exists(strlcat HAVE_STRLCAT)
if (NOT(HAVE_STRLCPY AND HAVE_DECL_STRLCPY AND HAVE_STRLCAT AND HAVE_DECL_STRLCAT))
	find_library(BSD_LIBRARY bsd)
	if (BSD_LIBRARY)
		unset(CMAKE_REQUIRED_LIBRARIES)
		set(CMAKE_REQUIRED_LIBRARIES ${BSD_LIBRARY})
		list(APPEND system_libs ${BSD_LIBRARY})
	endif()
	check_include_file(bsd/string.h HAVE_BSD_STRING_H)
	if(HAVE_BSD_STRING_H)
		add_definitions(-DHAVE_BSD_STRING_H)
	endif()
endif()

#
# ---- Einstein Platform Specific Build Instrcutions ---------------------------
#

if (${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")

	# set our application icon
	set (MACOSX_BUNDLE_ICON_FILE Einstein.icns)
	set_source_files_properties(Resources/macOS/${MACOSX_BUNDLE_ICON_FILE} PROPERTIES MACOSX_PACKAGE_LOCATION "Resources")

	# create the application
	add_executable(Einstein MACOSX_BUNDLE
		Resources/macOS/Info.plist.in
		Resources/macOS/Einstein.icns
		Resources/macOS/Entitlements.plist
	)

	# how to compile and link
	target_compile_options(Einstein PUBLIC
		-Wall -Wextra -Wpedantic -Wno-missing-field-initializers
		"$<$<CONFIG:DEBUG>:-Werror>"
	)
	target_compile_definitions(Einstein PRIVATE
		TARGET_UI_FLTK=1 NO_PORT_AUDIO NO_X11 TARGET_OS_OPENSTEP=1
		TARGET_OS_MAC=1 NS_BLOCK_ASSERTIONS=1
	)
	target_link_libraries(Einstein
		${system_libs}
		fltk
		fltk_images
		fltk_png
		fltk_z
		pthread
		"-framework AddressBook"
		"-framework AudioUnit"
		"-framework AppKit"
		"-framework CoreAudio"
		"-framework Cocoa"
	)
	set_target_properties(Einstein PROPERTIES
		MACOSX_BUNDLE_INFO_PLIST "${CMAKE_SOURCE_DIR}/Resources/macOS/Info.plist.in"
	)
	set_target_properties(Einstein PROPERTIES
		# TODO: set up the distribution system
		CPACK_BUNDLE_APPLE_ENTITLEMENTS "${CMAKE_SOURCE_DIR}/Resources/macOS/EntiXXXtlements.plist"
	)

elseif (${CMAKE_SYSTEM_NAME} STREQUAL "Linux")

	# set our application icon
	# TODO: Do this within FLTK and add icons for various desktops

	# create the application
	add_executable(Einstein)

	# how to compile and link
	target_compile_options(Einstein PUBLIC
		-Wall -Wno-multichar
		-Wno-misleading-indentation -Wno-missing-field-initializers
	)
	target_compile_definitions(Einstein PRIVATE
		TARGET_UI_FLTK=1 TARGET_OS_LINUX=1
	)
	target_link_libraries(Einstein
		${system_libs}
		fltk
		fltk_images
		fltk_png
		fltk_z
		pulse # sound
	)

elseif (WIN32)

	# create a resources file for Windows
	configure_file(
		Resources/MSWindows/Einstein.rc.in
		Einstein.rc
	)

	# create the application
	add_executable(Einstein WIN32
		${CMAKE_CURRENT_BINARY_DIR}/Einstein.rc
	)

	# how to compile and link
	target_compile_options(Einstein PUBLIC "/bigobj")
	if ($<CONFIG:Debug>) 
		target_compile_options(Einstein PUBLIC "/ZI")
	endif()
	target_compile_definitions(Einstein PRIVATE
		TARGET_UI_FLTK=1 TARGET_OS_WIN32=1
		WIN32_LEAN_AND_MEAN=1 _CRT_SECURE_NO_WARNINGS=1
	)
	target_link_libraries(Einstein
		${system_libs}
		fltk
		fltk_images
		fltk_png
		fltk_z
		winmm
	)

endif ()

#
# ---- Einstein Platform Independent Build Instrcutions ------------------------
#

target_include_directories(
	Einstein PUBLIC
	${CMAKE_SOURCE_DIR}
	${FLTK_INCLUDE_DIRS}
)

target_compile_definitions(Einstein PUBLIC "$<$<CONFIG:DEBUG>:_DEBUG>" USE_CMAKE)

# ---- Generated Files ---------------------------------------------------------

set_source_files_properties(
  /app/Version_CMake.h
  PROPERTIES GENERATED TRUE
)

string(TIMESTAMP COMPILE_TIME_YYYY "%Y")
string(TIMESTAMP COMPILE_TIME_MM "%m")
string(TIMESTAMP COMPILE_TIME_DD "%d")

configure_file(
	${CMAKE_SOURCE_DIR}/app/Version_CMake.h.in
	${CMAKE_SOURCE_DIR}/app/Version_CMake.h
)

# ---- Add Source Files To The Einstein Target ---------------------------------

add_subdirectory(app)
add_subdirectory(Emulator)
add_subdirectory(Monitor)
add_subdirectory(K)
if ( NEWT64_FOUND MATCHES true )
	add_subdirectory(Toolkit)
endif ()

# ---- Einstein Fluid Sources --------------------------------------------------

build_with_fluid( TFLAppUI      app/FLTK "app/Version_CMake.h" )
build_with_fluid( TFLRexImage   app/FLTK "_Data_/Einstein.rex" )
build_with_fluid( TFLSettingsUI app/FLTK )
build_with_fluid( TFLToolkitUI  Toolkit )

# --- Configure Developer Environments -----------------------------------------

get_target_property(all_source_files Einstein SOURCES)
set_property(GLOBAL PROPERTY USE_FOLDERS ON)
source_group(
  TREE   "${CMAKE_SOURCE_DIR}"
  PREFIX "Sources"
  FILES  ${all_source_files}
)

#
# ==== MessagePad.org distribution system ======================================
#
# TODO: We are moving to a CI/CD system that will build distributions with
# GitHub tools.
#

set (EINSTEIN_DIST_DIR "Sites/messagepad.org/htdocs/Downloads/Einstein")

if (${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")

	# MacOS
	add_custom_target(
		dist
		COMMAND ${CMAKE_COMMAND} -E tar "cfv" "/Users/matt/${EINSTEIN_DIST_DIR}/MacOS/Einstein.MacOS.${CMAKE_PROJECT_VERSION}.zip" --format=zip -- "Einstein.app"
		WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    )
    add_dependencies(dist Einstein)

    if (${CMAKE_GENERATOR} STREQUAL "Xcode")
        add_custom_target( XcodeFixIndentation
            COMMAND ${CMAKE_HOME_DIRECTORY}/cmake/xcodeFixIndentation
            WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
        )
    endif ()

elseif (${CMAKE_SYSTEM_NAME} STREQUAL "Linux")

	# Linux
	add_custom_target(
		dist
		COMMAND ${CMAKE_COMMAND} -E tar "cfv" "/media/psf/Home/${EINSTEIN_DIST_DIR}/Linux/Einstein.Linux.${CMAKE_PROJECT_VERSION}.zip" --format=zip -- "Einstein"
		WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
	)
    add_dependencies(dist Einstein)

elseif (${CMAKE_SYSTEM_NAME} STREQUAL "Windows")

	# MSWindows
	add_custom_target(
		dist
		COMMAND ${CMAKE_COMMAND} -E tar "cfv" "z:/${EINSTEIN_DIST_DIR}/MSWindows/Einstein.Windows.${CMAKE_PROJECT_VERSION}.zip" --format=zip -- "Einstein.exe"
		WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
	)
    add_dependencies(dist Einstein)

else ()

	# not supported
	message ("Einstein is not configured to distribute for this platform: " ${CMAKE_SYSTEM_NAME} ".")

endif ()


