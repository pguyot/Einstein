// generated by Fast Light User Interface Designer (fluid) version 1.0400

#include "TFLSampleScripts.h"

const char *kToolkitSampleScriptHelloWorld = /* text inlined from SampleScripts/HelloWorld.ns */
"//\n// NewtonScript example: Hello, World!\n//\n\nkAppName := \"Hello:WONKO\"\
;\nkAppSymbol := \'|Hello:WONKO|;\nkAppLabel := \"Hello\";\n\nnewt.theForm := \
{\n\tviewBounds: {\n\t\tleft: 0, top: 50, right: 200, bottom: 120\n\t},\n\t_pr\
oto: protoFloatNGo\n};\n\nhelloButton := {\n\ttext: \"Say Hello\",\n\tviewBoun\
ds: {\n\t\tleft: 50, top: 25, right: 150, bottom: 50\n\t},\n\tbuttonClickScrip\
t: func()\n\tbegin\n\t\tModalConfirm(\n\t\t\t\"Hello World of NewtonScript.\\r\
\\rHow exciting to see you!\",\n\t\t\t[ \"OK\" ]\n\t\t);\n\tend,\n\t_proto: pr\
otoTextButton\n};\nAddStepForm( newt.theForm, helloButton);\nStepDeclare( newt\
.theForm, helloButton, \'helloButton);\n";

const char *kToolkitSampleScriptNativeFunction = /* text inlined from SampleScripts/NativeFunction.ns */
"//\n// NewtonScript example: Native Call\n//\n// How to write ARM machine cod\
e within NewtonScript.\n//\n\nkAppName := \"Hello:WONKO\";\nkAppSymbol := \'|H\
ello:WONKO|;\nkAppLabel := \"Hello\";\n\nnewt.theForm := {\n\tviewBounds: {\n\
\t\tleft: 0, top: 50, right: 200, bottom: 120\n\t},\n_proto: protoFloatNGo\n};\
\n\nmathFunction := {\n\t_proto: protoStaticText,\n\ttext: \"4+8 =\",\n\tviewB\
ounds: RelBounds(50, 25, 30, 20)\n};\nAddStepForm(newt.theForm, mathFunction);\
\nStepDeclare(newt.theForm, mathFunction, \'mathFunction);\n\nmathResult := {\
\n\t_proto: protoStaticText,\n\tnativeMath: {\n\t\tclass : \'BinCFunction,\n\t\
\tnumArgs: 2,\n\t\toffset: 0,\n\t\tcode: MakeBinaryFromARM(\"\n\t\t\tldr r1, [\
r1]\t\t\t@ Unref the first argument\n\t\t\tldr r1, [r1]\t\t\t@ Get the integer\
 object\n\t\t\tmov r1, r1, lsr #2\t\t@ convert it into an integer\n\t\t\tldr r\
2, [r2]\n\t\t\tldr r2, [r2]\t\t\t@ do the same with the second arg\n\t\t\tmov \
r2, r2, lsr #2\n\t\t\tadd r0, r1, r2\t\t\t@ add both integers\n\t\t\tmov r0, r\
0, lsl #2\t\t@ convert the result into an integer object\n\t\t\tmov pc, lr\t\t\
\t\t@ return to the interpreter\n\t\t\t\")\n\t},\n\tnewtonScriptMath: func(a, \
b) begin\n\treturn a+b;\n\tend,\n\tViewSetupFormScript: func() begin\n\tSetVal\
ue(self, \'text, NumberStr( self:nativeMath(4, 8) ) );\n\tend,\n\ttext: \"Resu\
lt\",\n\tviewBounds: RelBounds(80, 25, 80, 20)\n};\nAddStepForm(newt.theForm, \
mathResult);\nStepDeclare(newt.theForm, mathResult, \'mathResult);\n\n";
